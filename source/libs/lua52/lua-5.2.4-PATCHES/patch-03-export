diff -ur lua-5.2.4.orig/src/lopcodes.h lua-5.2.4/src/lopcodes.h
--- lua-5.2.4.orig/src/lopcodes.h	2014-10-20 20:32:09.000000000 +0200
+++ lua-5.2.4/src/lopcodes.h	2015-03-11 08:31:42.000000000 +0100
@@ -269,7 +269,7 @@
   OpArgK   /* argument is a constant or register/constant */
 };
 
-LUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];
+LUA_API const lu_byte luaP_opmodes[NUM_OPCODES];
 
 #define getOpMode(m)	(cast(enum OpMode, luaP_opmodes[m] & 3))
 #define getBMode(m)	(cast(enum OpArgMask, (luaP_opmodes[m] >> 4) & 3))
@@ -278,7 +278,7 @@
 #define testTMode(m)	(luaP_opmodes[m] & (1 << 7))
 
 
-LUAI_DDEC const char *const luaP_opnames[NUM_OPCODES+1];  /* opcode names */
+LUA_API const char *const luaP_opnames[NUM_OPCODES+1];  /* opcode names */
 
 
 /* number of list items to accumulate before a SETLIST instruction */
diff -ur lua-5.2.4.orig/src/lundump.h lua-5.2.4/src/lundump.h
--- lua-5.2.4.orig/src/lundump.h	2013-04-12 20:48:47.000000000 +0200
+++ lua-5.2.4/src/lundump.h	2014-10-22 11:14:59.000000000 +0200
@@ -17,7 +17,7 @@
 LUAI_FUNC void luaU_header (lu_byte* h);
 
 /* dump one chunk; from ldump.c */
-LUAI_FUNC int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip);
+LUA_API int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip);
 
 /* data to catch conversion errors */
 #define LUAC_TAIL		"\x19\x93\r\n\x1a\n"
