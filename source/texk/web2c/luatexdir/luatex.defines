{  luatex.defines
   
   Copyright 1996-2006 Han The Thanh <thanh@pdftex.org>
   Copyright 2006-2008 Taco Hoekwater <taco@luatex.org>

   This file is part of LuaTeX.

   LuaTeX is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2 of the License, or (at your
   option) any later version.

   LuaTeX is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
   License for more details.

   You should have received a copy of the GNU General Public License along
   with LuaTeX; if not, see <http://www.gnu.org/licenses/>. }

{ $Id$ }

{ luatex.defines: additions for LuaTeX }

@define function new_node();
@define function new_glyph_node;
@define procedure flush_node();
@define function copy_node();
@define function copy_node_list();
@define procedure flush_node_list();
@define procedure replace_attribute_list();
@define const UNUSED_ATTRIBUTE;

@define function sizeof();
@define procedure memset();
@define function malloc();
@define function voidcast();
@define function varmemcast();
@define type void;
@define procedure init_node_mem();
@define procedure print_node_mem_stats;
@define procedure dump_node_mem;
@define procedure undump_node_mem;
@define var varmem;
@define var var_mem_max;

{ strings }

@define var str_pool;
@define var str_start;
@define var pool_ptr;
@define var str_ptr;
@define var init_pool_ptr;
@define var init_str_ptr;

@define function str_start_macro();
@define function str_length();
@define var cur_length;
@define procedure str_room();
@define procedure flush_string;
@define function make_string;
@define function get_strings_started;

{ }

@define function new_ligkern();
@define function make_lang_data();
@define procedure line_break();
@define procedure initialize_active;
@define var line_break_context;
@define var temp_no_whatsits;
@define var temp_no_dirs;
@define var temporary_dir;
@define var dir_ptr;
@define var dir_tmp;
@define var dir_rover;

@define procedure dump_language_data;
@define procedure undump_language_data;
@define function compound_word_break();
@define function get_pre_hyphen_char();
@define function get_post_hyphen_char();

@define procedure new_hyph_exceptions;
@define procedure new_patterns;
@define procedure new_pre_hyphen_char;
@define procedure new_post_hyphen_char;
@define procedure new_pre_exhyphen_char;
@define procedure new_post_exhyphen_char;

{ macros from luatex.h }
@define procedure pdfassert();

@define procedure luatokencall();
@define function get_lua_name();

{ for callbacks }

@define function  run_callback();
@define function  callback_defined();
@define var stop_run_callback;
@define var buildpage_filter_callback;
@define procedure get_lua_number();
@define procedure get_token_lua;
@define procedure lua_node_filter();
@define procedure lua_node_filter_s();
@define procedure check_texconfig_init;

{ bits for extended char code access }

@define const tex_mathcode    ;
@define const aleph_mathcode  ;
@define const xetex_mathcode   ;
@define const xetexnum_mathcode;

@define type mathcodeval;
@define @field class_value;
@define @field family_value;
@define @field character_value;

@define function get_math_code();
@define procedure set_math_code();
@define function get_del_code();
@define procedure set_del_code();

@define function scan_mathchar();
@define function scan_delimiter_as_mathchar();
@define function mathchar_from_integer();

@define procedure setup_math_style;
@define procedure print_math_style;

@define procedure unsave_math_codes ();
@define procedure initialize_math_codes;
@define procedure dump_math_codes;
@define procedure undump_math_codes;
@define procedure free_math_codes;

@define function get_lc_code();
@define procedure set_lc_code();

@define function get_uc_code();
@define procedure set_uc_code();

@define function get_sf_code();
@define procedure set_sf_code();

@define function get_cat_code();
@define procedure set_cat_code();

@define function valid_catcode_table ();
@define procedure copy_cat_codes ();
@define procedure initex_cat_codes ();
@define procedure unsave_cat_codes ();
@define procedure unsave_text_codes ();
@define procedure free_text_codes;

@define var extra_version_info;

{ bits and pieces from aleph }

@define procedure init_null_ocp();
@define procedure run_ocp;
@define procedure initialize_ocp_buffers();
@define const null_ocp;
@define const null_ocp_list;

@define procedure new_ocp();
@define function is_last_ocp();
@define procedure dump_active_ocp_info;
@define procedure undump_active_ocp_info;
@define var active_min_ptr;
@define var active_max_ptr;

@define procedure dump_ocp_info;
@define procedure undump_ocp_info;

@define procedure initialize_init_ocplists;
@define procedure initialize_ocplist_arrays();
@define procedure dump_ocplist_info;
@define procedure undump_ocplist_info;

@define const add_before_op;
@define const add_after_op;
@define const remove_before_op;
@define const remove_after_op;

@define procedure new_ocp_list();
@define procedure do_push_ocp_list() ;
@define procedure do_pop_ocp_list() ;
@define procedure do_clear_ocp_lists();

{ 'texfont' library definitions }

@define procedure dump_font ();
@define procedure undump_font ();
@define function  is_valid_font();
@define function  copy_font();
@define function  max_font_id;
@define procedure set_max_font_id();

@define function font_name();
@define function font_area();
@define function font_size();

@define function tex_font_name();
@define function tex_font_area();

@define procedure set_pdf_font_attr();

@define function pdf_font_size();
@define function pdf_font_num();
@define function pdf_font_blink();
@define function pdf_font_elink();
@define function pdf_font_expand_ratio();
@define function pdf_font_attr();

@define function font_used();
@define function font_dsize();
@define function slant();
@define function quad();
@define function x_height();
@define function space();
@define function extra_space();
@define function space_stretch();
@define function space_shrink();

@define procedure set_to_character();
@define procedure set_to_glyph();
@define procedure set_is_leftghost();
@define procedure set_is_rightghost();

@define function hyphen_char();
@define function skew_char();
@define procedure set_hyphen_char();
@define procedure set_skew_char();
@define function char_exists();
@define function char_width();
@define function char_height();
@define function char_depth();
@define function char_italic();
@define function read_font_info();
@define procedure pdf_check_vf();

@define procedure set_tag_code();
@define procedure set_lp_code();
@define procedure set_rp_code();
@define procedure set_ef_code();
@define procedure set_no_ligatures();

{ functions from mapfile.c }

@define procedure pdfmapfile();
@define procedure pdfmapline();
@define procedure pdf_init_map_file();

{functions from filename.c }

@define procedure pack_job_name();
@define procedure prompt_file_name();
@define procedure scan_file_name;
@define function make_name_string;
@define procedure print_file_name();

{ functions from utils/utils.c }

@define procedure append_string();
@define function newcolorstack();
@define function colorstackused;

@define procedure pdfsetmatrix();

@define var static_pdf;

{functions from textoken.c }

@define function get_next;
@define function scan_keyword();
@define procedure scan_direction;
@define function active_to_cs();
@define function string_to_toks();

{ functions from image/writeimg.c }

@define function epdf_xsize();
@define function epdf_ysize();
@define function epdf_orig_x();
@define function epdf_orig_y();
@define function image_width();
@define function image_height();
@define function image_depth();
@define function is_pdf_image();
@define procedure write_image();

{texmf.defines}

@define type two_halves;
@define type four_quarters;

@define function input_ln ();
@define procedure seconds_and_micros ();
@define function w_open_out ();

@define procedure dump_hh ();
@define procedure dump_int ();
@define procedure dump_things ();
@define procedure dump_wd ();

@define procedure undump_hh ();
@define procedure undump_int ();
@define procedure undump_qqqq ();
@define procedure undump_things ();
@define procedure undump_checked_things ();
@define procedure undump_wd ();
@define procedure w_close ();

{common.defines}

@define type memory_word; {for gftodvi, TeX, and Metafont}

@define function a_open_in ();
@define procedure a_close ();

{ functions from the synctex controller in synctex.c }

@define procedure synctex_init_command;
@define procedure synctex_start_input;
@define procedure synctex_terminate();

{math stuff}

@define procedure initialize_math;

@define procedure scan_extdef_math_code();
@define procedure scan_extdef_del_code();

@define function fam_fnt();
@define procedure def_fam_fnt();
@define procedure dump_math_data;
@define procedure undump_math_data;
@define procedure unsave_math_data();

@define const ord_noad_type;
@define const op_noad_type_normal;
@define const op_noad_type_limits;
@define const op_noad_type_no_limits;
@define const bin_noad_type;
@define const rel_noad_type;
@define const open_noad_type;
@define const close_noad_type;
@define const punct_noad_type;
@define const inner_noad_type;
@define const under_noad_type;
@define const over_noad_type;

@define const left_noad_side   ;
@define const middle_noad_side ;
@define const right_noad_side  ;

@define function new_sub_box();
@define function math_vcenter_group();
@define procedure close_math_group();
@define procedure set_math_char();
@define function new_style();
@define const display_style;
@define const text_style;
@define const script_style;
@define const script_script_style;
@define const cramped_display_style;
@define const cramped_text_style;
@define const cramped_script_style;
@define const cramped_script_script_style;

@define procedure def_math_param();
@define procedure math_char_in_text();

@define const math_param_quad;
@define const math_param_axis;
@define const math_param_operator_size;
@define const math_param_overbar_kern;
@define const math_param_overbar_rule;
@define const math_param_overbar_vgap;
@define const math_param_underbar_kern;
@define const math_param_underbar_rule;
@define const math_param_underbar_vgap;
@define const math_param_radical_kern;
@define const math_param_radical_rule;
@define const math_param_radical_vgap;
@define const math_param_radical_degree_before;
@define const math_param_radical_degree_after;
@define const math_param_radical_degree_raise;
@define const math_param_stack_vgap;
@define const math_param_stack_num_up;
@define const math_param_stack_denom_down;
@define const math_param_fraction_rule;
@define const math_param_fraction_num_vgap;
@define const math_param_fraction_num_up;
@define const math_param_fraction_denom_vgap;
@define const math_param_fraction_denom_down;
@define const math_param_fraction_del_size;
@define const math_param_limit_above_vgap;
@define const math_param_limit_above_bgap;
@define const math_param_limit_above_kern;
@define const math_param_limit_below_vgap;
@define const math_param_limit_below_bgap;
@define const math_param_limit_below_kern;
@define const math_param_under_delimiter_vgap;
@define const math_param_under_delimiter_bgap;
@define const math_param_over_delimiter_vgap;
@define const math_param_over_delimiter_bgap;
@define const math_param_sub_shift_drop;
@define const math_param_sup_shift_drop;
@define const math_param_sub_shift_down;
@define const math_param_sub_sup_shift_down;
@define const math_param_sub_top_max;
@define const math_param_sup_shift_up;
@define const math_param_sup_bottom_min;
@define const math_param_sup_sub_bottom_max;
@define const math_param_subsup_vgap;
@define const math_param_space_after_script;
@define const math_param_connector_overlap_min;
@define const math_param_first_mu_glue;
@define const math_param_ord_ord_spacing;
@define const math_param_ord_op_spacing;
@define const math_param_ord_bin_spacing;
@define const math_param_ord_rel_spacing;
@define const math_param_ord_open_spacing;
@define const math_param_ord_close_spacing;
@define const math_param_ord_punct_spacing;
@define const math_param_ord_inner_spacing;
@define const math_param_op_ord_spacing;
@define const math_param_op_op_spacing;
@define const math_param_op_bin_spacing;
@define const math_param_op_rel_spacing;
@define const math_param_op_open_spacing;
@define const math_param_op_close_spacing;
@define const math_param_op_punct_spacing;
@define const math_param_op_inner_spacing;
@define const math_param_bin_ord_spacing;
@define const math_param_bin_op_spacing;
@define const math_param_bin_bin_spacing;
@define const math_param_bin_rel_spacing;
@define const math_param_bin_open_spacing;
@define const math_param_bin_close_spacing;
@define const math_param_bin_punct_spacing;
@define const math_param_bin_inner_spacing;
@define const math_param_rel_ord_spacing;
@define const math_param_rel_op_spacing;
@define const math_param_rel_bin_spacing;
@define const math_param_rel_rel_spacing;
@define const math_param_rel_open_spacing;
@define const math_param_rel_close_spacing;
@define const math_param_rel_punct_spacing;
@define const math_param_rel_inner_spacing;
@define const math_param_open_ord_spacing;
@define const math_param_open_op_spacing;
@define const math_param_open_bin_spacing;
@define const math_param_open_rel_spacing;
@define const math_param_open_open_spacing;
@define const math_param_open_close_spacing;
@define const math_param_open_punct_spacing;
@define const math_param_open_inner_spacing;
@define const math_param_close_ord_spacing;
@define const math_param_close_op_spacing;
@define const math_param_close_bin_spacing;
@define const math_param_close_rel_spacing;
@define const math_param_close_open_spacing;
@define const math_param_close_close_spacing;
@define const math_param_close_punct_spacing;
@define const math_param_close_inner_spacing;
@define const math_param_punct_ord_spacing;
@define const math_param_punct_op_spacing;
@define const math_param_punct_bin_spacing;
@define const math_param_punct_rel_spacing;
@define const math_param_punct_open_spacing;
@define const math_param_punct_close_spacing;
@define const math_param_punct_punct_spacing;
@define const math_param_punct_inner_spacing;
@define const math_param_inner_ord_spacing;
@define const math_param_inner_op_spacing;
@define const math_param_inner_bin_spacing;
@define const math_param_inner_rel_spacing;
@define const math_param_inner_open_spacing;
@define const math_param_inner_close_spacing;
@define const math_param_inner_punct_spacing;
@define const math_param_inner_inner_spacing;


@define const hlist_node;
@define const vlist_node;
@define const rule_node;
@define const ins_node;
@define const mark_node;
@define const adjust_node;
@define const disc_node;
@define const whatsit_node;
@define const math_node;
@define const glue_node;
@define const kern_node;
@define const penalty_node;
@define const unset_node;
@define const margin_kern_node;
@define const glyph_node;
@define const inserting_node;
@define const split_up_node;
@define const glue_spec_node;
@define const shape_node;

@define const write_node_size;
@define const open_node_size;

@define procedure print_short_node_contents();
@define procedure show_node_list();

@define const zero_glue ;
@define const sfi_glue ;
@define const fil_glue ;
@define const fill_glue ;
@define const ss_glue ;
@define const fil_neg_glue ;
@define const page_ins_head ;
@define const contrib_head ;
@define const page_head ;
@define const temp_head ;
@define const hold_head ;
@define const adjust_head ;
@define const pre_adjust_head ;
@define const align_head ;
@define const end_span ;

@define procedure primitive_tex();
@define procedure primitive_etex();
@define procedure primitive_aleph();
@define procedure primitive_omega();
@define procedure primitive_pdftex();
@define procedure primitive_luatex();
@define procedure primitive_core();
@define procedure print_cmd_chr();

@define procedure init_primitives;
@define procedure ini_init_primitives;
@define procedure dump_primitives;
@define procedure undump_primitives;

@define const undefined_primitive;
@define const hash_prime;

@define function get_prim_eq_type();
@define function get_prim_equiv();
@define function prim_lookup();
@define procedure tex_def_font();

{ alignments }

@define procedure initialize_alignments;
@define procedure init_align;
@define procedure align_peek;
@define function fin_col;
@define procedure fin_row;
@define const span_code;
@define const cr_code;
@define const cr_cr_code;

{input stacks }

@define type in_state_record;

@define var in_open;
@define var open_parens;
@define var input_file;
@define var line;
@define var line_stack;
@define var source_filename_stack;
@define var full_source_filename_stack;

@define var input_stack;
@define var input_ptr;
@define var max_in_stack;
@define var cur_input;

@define var iloc;
@define var istate;
@define var iindex;
@define var istart;
@define var ilimit;
@define var nofilter;
@define var iname;
@define var synctex_tag;
@define var current_ocp_lstack;
@define var current_ocp_no;
@define var new_line;

@define const defining;
@define const matching;
@define const aligning;
@define const absorbing;

@define var scanner_status;
@define var warning_index;
@define var def_ref;

@define var token_list;
@define var token_type;

@define const parameter;
@define const v_template;
@define const backed_up;
@define const inserted;
@define const macro;
@define const output_text;
@define const every_par_text;
@define const every_vbox_text;
@define const every_job_text;
@define const write_text;

@define var param_stack;
@define var max_param_stack;
@define var align_state;
@define var base_ptr;

@define @field name_field;
@define @field loc_field;
@define @field state_field;
@define @field index_field;

@define procedure runaway;
@define procedure set_trick_count;
@define procedure show_context;

@define procedure back_list();
@define procedure ins_list();

@define procedure begin_token_list();
@define procedure end_token_list;
@define procedure back_input;
@define function reinsert_token () ;
@define procedure begin_file_reading;
@define procedure end_file_reading; 
@define procedure initialize_inputstack;

{ pdf generation }

@define procedure init_start_time();
@define function getcreationdate();
@define procedure pdf_error();
@define procedure check_pdfoutput();

@define procedure initialize_pdfgen;
@define procedure dump_pdftex_data();
@define procedure undump_pdftex_data();

@define var fixed_pdfoutput; 
@define var fixed_pdfoutput_set; 
@define var epochseconds;
@define var microseconds;

@define procedure pdf_out();

@define procedure check_pdfminorversion();

@define const one_inch;
@define var one_true_inch;
@define var one_hundred_inch;
@define const one_bp;

@define var pdf_output_option;
@define var pdf_output_value;
@define var pdf_draftmode_option;
@define var pdf_draftmode_value;

@define procedure pdf_init_font();
@define procedure pdf_literal();

@define const colorstack_set;
@define const colorstack_push;
@define const colorstack_pop;
@define const colorstack_current;
@define const colorstack_data;
@define function pdf_colorstack_stack();
@define function pdf_colorstack_cmd();
@define function pdf_colorstack_data();
@define procedure set_pdf_colorstack_stack();
@define procedure set_pdf_colorstack_cmd();
@define procedure set_pdf_colorstack_data();

@define function pdf_ximage_idx();
@define procedure set_pdf_ximage_idx();

@define function pdf_literal_mode();
@define function pdf_literal_data();
@define function pdf_literal_type();
@define procedure set_pdf_literal_mode();
@define procedure set_pdf_literal_data();
@define procedure set_pdf_literal_type();

@define function pdf_setmatrix_data();
@define procedure set_pdf_setmatrix_data();

@define function pdf_obj_objnum();
@define procedure set_pdf_obj_objnum();

@define function obj_info();
@define const obj_type_page;
@define const obj_type_obj;
@define const obj_type_xform;
@define const obj_type_ximage;

@define const direct_always;
@define const direct_page;
@define const set_origin;

@define function obj_data_ptr();
@define const pdfmem_obj_size;

@define function obj_xform_box();
@define function pdf_width();
@define function pdf_depth();
@define function pdf_height();

@define procedure set_pdf_width();
@define procedure set_pdf_depth();
@define procedure set_pdf_height();

@define procedure set_ff();

@define function get_obj();

@define procedure scan_pdfoutline();

@define procedure pdf_write_image();
@define procedure scan_image();

@define procedure pdf_check_obj();
@define procedure pdf_write_obj();

@define procedure scan_pdfdest();

@define procedure scan_thread_id;
@define procedure new_annot_whatsit();
@define procedure scan_annot();
@define procedure scan_startlink();
@define procedure scan_pdfxform();
@define procedure scan_pdfrefxform();
@define procedure scan_pdfcatalog();

@define var pdf_last_obj;
@define const inf_pk_dpi;
@define const sup_pk_dpi;
@define var pk_dpi;
@define var pdf_cur_form;
@define var pdf_names_toks;
@define var pdf_info_toks;
@define var pdf_trailer_toks;

@define procedure scan_obj();

{ pdf fonts }

@define function expand_font();
@define procedure read_expand_font;
@define procedure new_letterspaced_font();
@define procedure make_font_copy() ;
@define procedure pdf_include_chars();
@define procedure glyph_to_unicode;

{ pdf ship }

@define procedure fix_pdfoutput;
@define procedure pdf_ship_out();
@define procedure finish_pdf_file();
@define procedure remove_pdffile();

{ dvi ship }

@define procedure out_what(); {web trick}

@define @field h;
@define @field v;
@define var cur;
@define var pos;
@define var dvi_buf_size;
@define var dvi_buf;
@define var dead_cycles;

@define procedure dvi_ship_out();
@define procedure finish_dvi_file();

{ printing }

@define const no_print;
@define const term_only;
@define const log_only;
@define const term_and_log;
@define const pseudo;
@define const new_string;
@define const ssup_error_line;

@define var max_selector;
@define var log_file; 
@define var selector;
@define var dig;
@define var tally;
@define var term_offset;
@define var file_offset;

@define procedure wterm();
@define procedure wterm_cr;
@define procedure wlog_cr;
@define procedure fprintf();

@define procedure print_ln;
@define procedure print_char();
@define procedure print();
@define procedure tprint();
@define procedure print_nl();
@define procedure slow_print();
@define procedure print_banner();
@define var pdftex_banner;
@define procedure print_esc();
@define procedure print_the_digs();
@define procedure print_int();
@define procedure print_roman_int();
@define procedure print_font_name();

@define procedure print_cs();
@define procedure sprint_cs();
@define procedure prompt_input();
@define function is_active_cs();
@define function active_cs_value();
@define procedure print_spec();

@define var font_in_short_display;
@define procedure print_font_identifier();
@define procedure short_display();
@define procedure print_font_and_char();
@define procedure print_mark();
@define procedure print_rule_dimen();
@define procedure print_skip_param();
@define var depth_threshold;
@define var breadth_max;
@define procedure show_box();

{ error handling }

@define const batch_mode;
@define const nonstop_mode;
@define const scroll_mode;
@define const error_stop_mode;
@define const unspecified_mode;

@define var interaction;
@define var interactionoption;

@define procedure initialize_errors;
@define procedure print_err();
@define procedure fixup_selector();

@define procedure char_warning();

@define const spotless;
@define const warning_issued;
@define const fatal_error_stop;

@define var use_err_help;
@define var set_box_allowed;
@define var history;
@define var error_count;
@define var interrupt;
@define var OK_to_interrupt; 


@define procedure help0;
@define procedure help1();
@define procedure help2();
@define procedure help3();
@define procedure help4();
@define procedure help5();
@define procedure help6();

@define procedure do_final_end ;
@define procedure error ;
@define procedure int_error() ;
@define procedure succumb ;
@define procedure fatal_error();
@define procedure overflow();
@define procedure confusion();
@define procedure check_interrupt ;

@define procedure back_error;
@define procedure ins_error;

{file io}

@define var nameoffile;
@define var name_file_pointer;

@define var input_file_callback_id ;

@define function lua_a_open_in ();
@define procedure lua_a_close_in();
@define procedure lua_a_close_out();

@define var buffer;
@define var first;
@define var last;
@define var max_buf_stack;

@define function lua_input_ln();
@define var term_in;
@define var term_out;
@define procedure t_open_out;
@define procedure update_terminal;
@define procedure wake_up_terminal;

@define var cur_name;
@define var cur_area;
@define var cur_ext;

@define var file_name_size;
@define var format_extension;
@define var format_default_length;
@define var job_name;
@define var log_opened;
@define var dvi_file;
@define var texmf_log_name;

@define function open_fmt_file;
@define function w_make_name_string();
@define procedure pack_cur_name;
@define procedure open_log_file;
@define procedure start_input;



{ arithmetic }

{define procedure incr();}
{define procedure decr();}
@define procedure negate();

@define function half();
@define const two;
@define procedure print_scaled();
@define var arith_error;

@define function nx_plus_y();
@define function mult_integers();

@define function x_over_n();
@define function xn_over_d();

@define var inf_bad;
@define function badness();
@define function float_constant();

@define var random_seed;

@define procedure init_randoms();
@define function unif_rand();
@define function norm_rand;

{ memory }

@define type word_file;
@define procedure print_word();

{ tokens }

@define type smemory_word;
@define const fix_mem_init;

@define var fixmem;
@define var fix_mem_min;
@define var fix_mem_max;
@define var fix_mem_end;

@define var garbage;        
@define var temp_token_head;
@define var hold_token_head;
@define var omit_template;  
@define var null_list;      
@define var backup_head;    
@define procedure print_meaning;

@define procedure initialize_tokens;

@define var dyn_used;
@define function token_info();
@define function token_link();
@define procedure set_token_info();
@define procedure set_token_link();

@define function token_ref_count();
@define procedure set_token_ref_count();
@define procedure add_token_ref();

@define var avail;

@define function get_avail;
@define procedure free_avail();
@define procedure show_token_list();
@define procedure token_show();

@define procedure store_new_token();
@define procedure delete_token_ref();
@define procedure flush_list();

@define function end_line_char_inactive;

@define var par_loc;
@define var par_token;
@define var luacstrings;
@define procedure get_token;
@define function lua_str_toks();
@define function str_toks();

@define var pseudo_files;
@define procedure lua_string_start;
@define procedure pseudo_close;

@define function scan_lua_state;

@define procedure initialize_read;
@define procedure read_toks();
@define var read_open;
@define var read_file;
@define const closed;
@define const just_open;

@define function tokens_to_string();

{ expanding }

@define procedure expand;
@define procedure get_x_token;
@define procedure x_token;

@define const top_mark_code;
@define const first_mark_code;
@define const bot_mark_code;
@define const split_first_mark_code;
@define const split_bot_mark_code;
@define const marks_code;

@define function top_mark();
@define function first_mark();
@define function bot_mark();
@define function split_first_mark();
@define function split_bot_mark();

@define procedure set_top_mark();
@define procedure set_first_mark();
@define procedure set_bot_mark();

@define procedure delete_top_mark();
@define procedure delete_bot_mark();
@define procedure delete_first_mark();
@define procedure delete_split_first_mark();
@define procedure delete_split_bot_mark();

@define const clear_marks_code;
@define var biggest_used_mark;

@define procedure initialize_marks;

{ conditionals }

@define const if_char_code;
@define const if_cat_code;
@define const if_int_code;
@define const if_dim_code;
@define const if_odd_code;
@define const if_vmode_code;
@define const if_hmode_code;
@define const if_mmode_code;
@define const if_inner_code;
@define const if_void_code;
@define const if_hbox_code;
@define const if_vbox_code;
@define const ifx_code;
@define const if_eof_code;
@define const if_true_code;
@define const if_false_code;
@define const if_case_code;
@define const if_def_code;
@define const if_cs_code;
@define const if_font_char_code;
@define const if_in_csname_code;
@define const if_primitive_code;
@define const if_abs_num_code;
@define const if_abs_dim_code;

@define function if_limit_subtype();
@define function if_limit_type();
@define function if_line_field();

@define const if_code;
@define const fi_code;
@define const else_code;
@define const or_code;

@define var cond_ptr;
@define var if_limit;
@define var cur_if;
@define var if_line;

@define procedure conditional;

{ nesting }

@define procedure print_mode();
@define procedure print_in_mode();

@define const ignore_depth;
@define type list_state_record;
@define @field mode_field;
@define @field head_field;
@define @field tail_field;
@define @field eTeX_aux_field;
@define @field pg_field;
@define @field ml_field;
@define @field aux_field;
@define @field dirs_field;

@define var nest;
@define var nest_ptr;
@define var max_nest_stack;
@define var cur_list;
@define var shown_mode;

@define procedure push_nest;
@define procedure pop_nest;
@define procedure tail_append();
@define procedure show_activities;

{ packaging }

@define const exactly;
@define const additional;
@define const substituted;

@define var pack_direction;
@define var adjust_tail;
@define var pre_adjust_tail;
@define var font_expand_ratio;

@define procedure scan_spec();
@define function hpack();
@define function filtered_hpack();

@define function vpack();
@define function vpackage();
@define function filtered_vpackage();
@define procedure append_to_vlist();

@define function prune_page_top();
@define var active_height;
@define const awful_bad;
@define const deplorable;
@define var best_height_plus_depth;
@define function vert_break();
@define function vsplit();

@define const box_code;
@define const copy_code;
@define const last_box_code;
@define const vsplit_code;
@define const vtop_code;

@define var tail_page_disc;
@define var page_disc;
@define var split_disc;
@define var disc_ptr;

@define const box_flag;
@define const global_box_flag;
@define const ship_out_flag;
@define const leader_flag;

@define procedure begin_box();

{ scanning routines }

@define const int_val_level;
@define const attr_val_level;
@define const dimen_val_level;
@define const glue_val_level;
@define const mu_val_level;

@define const infinity;

@define var cur_val;
@define var cur_val1;
@define var cur_val_level;
@define var cur_order;

@define procedure scan_register_num;
@define procedure scan_mark_num ;
@define procedure scan_char_num;
@define procedure scan_four_bit_int;
@define procedure scan_math_family_int;
@define procedure scan_int;
@define procedure scan_normal_dimen;
@define procedure scan_dimen();
@define procedure scan_glue();
@define function the_toks;

@define procedure get_font_dimen;
@define procedure set_font_dimen;

@define function scan_rule_spec;
@define function scan_toks();

{ directions }

@define function is_mirrored();
@define function new_dir();
@define procedure initialize_directions;

@define var text_dir_ptr;
@define var text_dir_tmp;

